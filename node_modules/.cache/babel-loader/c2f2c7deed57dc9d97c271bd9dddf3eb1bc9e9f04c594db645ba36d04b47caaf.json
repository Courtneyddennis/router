{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\FSA\\\\Phase 2\\\\router\\\\src\\\\components\\\\Update.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Update(_ref) {\n  _s();\n  let {\n    token\n  } = _ref;\n  const BASE = \"https://strangers-things.herokuapp.com/api/2211-ftb-ct-web-pt\";\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [willDeliver, setWillDeliver] = useState(true);\n  const navigate = useNavigate();\n  async function updatePosts(event) {\n    event.preventDefault();\n    try {\n      const response = await fetch(`${BASE}/{postId}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        method: \"PATCH\",\n        body: JSON.stringify({\n          post: {\n            title: title,\n            description: description,\n            price: price,\n            willDeliver: willDeliver\n          }\n        })\n      });\n      let result = await response.json();\n      console.log(result);\n      navigate('/Posts', {\n        replace: true\n      });\n      if (result && result.title) {\n        const newPosts = posts.map(post => {\n          if (post.id === postId) {\n            return result;\n          } else {\n            return post;\n          }\n        });\n        setPosts(newPosts);\n        setTitle(\"\");\n        setDescription(\"\");\n        setPrice(\"\");\n        setWillDeliver(\"\");\n        setPostId(null);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: post.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => setPostId(post.id),\n      children: \"Edit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, post._id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 13\n  }, this);\n}\n_s(Update, \"TCGGVVXXpDt5hU7XRuSpoFLvWaQ=\", true);\n_c = Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["useState","useEffect","Link","Update","token","BASE","title","setTitle","description","setDescription","price","setPrice","willDeliver","setWillDeliver","navigate","useNavigate","updatePosts","event","preventDefault","response","fetch","headers","method","body","JSON","stringify","post","result","json","console","log","replace","newPosts","posts","map","id","postId","setPosts","setPostId","err","_id"],"sources":["C:/Users/User/Desktop/FSA/Phase 2/router/src/components/Update.js"],"sourcesContent":["import {useState,useEffect} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Update({token}){\r\n    const BASE = \"https://strangers-things.herokuapp.com/api/2211-ftb-ct-web-pt\"\r\n    const[title,setTitle]=useState(\"\")\r\n    const[description,setDescription]=useState(\"\")\r\n    const[price,setPrice]=useState(\"\")\r\n    const[willDeliver,setWillDeliver]=useState(true)\r\n    const navigate = useNavigate();\r\n\r\n\r\n\r\n    \r\n        async function updatePosts(event){\r\n            event.preventDefault()\r\n             try{\r\n                 const response = await fetch(`${BASE}/{postId}`,{\r\n\r\n                     headers:{\r\n                         'Content-Type': 'application/json',\r\n                            'Authorization': `Bearer ${token}`\r\n                         },\r\n                         method:\"PATCH\",\r\n                         body: JSON.stringify({\r\n                            post: {\r\n                              title: title,\r\n                              description: description,\r\n                              price: price,\r\n                              willDeliver: willDeliver\r\n                            }})\r\n\r\n                    })\r\n\r\n                    let result = await response.json()\r\n                    console.log(result)\r\n                    navigate('/Posts', {replace: true})\r\n                    if(\r\n                        result&&result.title\r\n                    ){const newPosts=posts.map(post=>{\r\n                        if(post.id===postId){\r\n                            return result;\r\n                        }else{\r\n                            return post;\r\n                        }\r\n                    });\r\n                    setPosts(newPosts);\r\n                    setTitle(\"\");\r\n                    setDescription(\"\");\r\n                    setPrice(\"\");\r\n                    setWillDeliver(\"\")\r\n                    setPostId(null);\r\n\r\n                    }\r\n                \r\n             }catch(err){\r\n                 console.log(err)\r\n             }\r\n         }\r\n   \r\n\r\n         return(\r\n            <div key={post._id} className=\"card\">\r\n                <div>{post.title}</div>\r\n                <div>{post.description}</div>\r\n                <div>{post.price}</div>\r\n                <button type=\"button\"\r\n                onClick={()=>setPostId(post.id)}>Edit</button>\r\n                \r\n            </div>\r\n\r\n        )\r\n\r\n\r\n}"],"mappings":";;AAAA,SAAQA,QAAQ,EAACC,SAAS,QAAO,OAAO;AACxC,SAASC,IAAI,QAAQ,kBAAkB;AAAC;AAExC,eAAe,SAASC,MAAM,OAAS;EAAA;EAAA,IAAR;IAACC;EAAK,CAAC;EAClC,MAAMC,IAAI,GAAG,+DAA+D;EAC5E,MAAK,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACP,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAK,CAACQ,WAAW,EAACC,cAAc,CAAC,GAACT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAK,CAACU,KAAK,EAACC,QAAQ,CAAC,GAACX,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAK,CAACY,WAAW,EAACC,cAAc,CAAC,GAACb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMc,QAAQ,GAAGC,WAAW,EAAE;EAK1B,eAAeC,WAAW,CAACC,KAAK,EAAC;IAC7BA,KAAK,CAACC,cAAc,EAAE;IACrB,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEf,IAAK,WAAU,EAAC;QAE5CgB,OAAO,EAAC;UACJ,cAAc,EAAE,kBAAkB;UAC/B,eAAe,EAAG,UAASjB,KAAM;QACpC,CAAC;QACDkB,MAAM,EAAC,OAAO;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAClBC,IAAI,EAAE;YACJpB,KAAK,EAAEA,KAAK;YACZE,WAAW,EAAEA,WAAW;YACxBE,KAAK,EAAEA,KAAK;YACZE,WAAW,EAAEA;UACf;QAAC,CAAC;MAEV,CAAC,CAAC;MAEF,IAAIe,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;MAClCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;MACnBb,QAAQ,CAAC,QAAQ,EAAE;QAACiB,OAAO,EAAE;MAAI,CAAC,CAAC;MACnC,IACIJ,MAAM,IAAEA,MAAM,CAACrB,KAAK,EACvB;QAAC,MAAM0B,QAAQ,GAACC,KAAK,CAACC,GAAG,CAACR,IAAI,IAAE;UAC7B,IAAGA,IAAI,CAACS,EAAE,KAAGC,MAAM,EAAC;YAChB,OAAOT,MAAM;UACjB,CAAC,MAAI;YACD,OAAOD,IAAI;UACf;QACJ,CAAC,CAAC;QACFW,QAAQ,CAACL,QAAQ,CAAC;QAClBzB,QAAQ,CAAC,EAAE,CAAC;QACZE,cAAc,CAAC,EAAE,CAAC;QAClBE,QAAQ,CAAC,EAAE,CAAC;QACZE,cAAc,CAAC,EAAE,CAAC;QAClByB,SAAS,CAAC,IAAI,CAAC;MAEf;IAEP,CAAC,QAAMC,GAAG,EAAC;MACPV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;IACpB;EACJ;EAGA,oBACG;IAAoB,SAAS,EAAC,MAAM;IAAA,wBAChC;MAAA,UAAMb,IAAI,CAACpB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAO,eACvB;MAAA,UAAMoB,IAAI,CAAClB;IAAW;MAAA;MAAA;MAAA;IAAA,QAAO,eAC7B;MAAA,UAAMkB,IAAI,CAAChB;IAAK;MAAA;MAAA;MAAA;IAAA,QAAO,eACvB;MAAQ,IAAI,EAAC,QAAQ;MACrB,OAAO,EAAE,MAAI4B,SAAS,CAACZ,IAAI,CAACS,EAAE,CAAE;MAAA,UAAC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,GALxCT,IAAI,CAACc,GAAG;IAAA;IAAA;IAAA;EAAA,QAOZ;AAKlB;AAAC,GAvEuBrC,MAAM;AAAA,KAANA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}